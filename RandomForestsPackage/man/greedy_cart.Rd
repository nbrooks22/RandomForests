% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GierigesVerfahren.R
\name{greedy_cart}
\alias{greedy_cart}
\title{Greedy Algorithm}
\usage{
greedy_cart(x, y, data, type = "reg", depth = 0, num_split = 2, min_num = 1)
}
\arguments{
\item{x}{column/list name(s) of the x value(s)}

\item{y}{column/list name of the y value}

\item{data}{tibble or named list with data}

\item{type}{"reg" for regression tree\cr "class" for classification tree}

\item{depth}{desired depth of the tree \cr must be greater than 0}

\item{num_split}{split only nodes which contain at least num_split elements \cr must be greater than 2}

\item{min_num}{only split a node, if both child nodes have at least min_num elements \cr must be greater than 1}
}
\value{
An environment with the elements \code{dim}, \code{values} and \code{tree}.\cr
\code{dim} gives the dimension of the data. \cr
\code{values} gives back the data in a tibble. \cr
\code{tree} is the tree in the form of a tibble. It has the following columns \cr
\itemize{
\item node: node n has the child nodes 2n and 2n + 1
\item name: type of the node (root, inner node, leaf)
\item split_index: at which index we split the data
\item split_point: where we split the data. If node 2n has the split point s
then all data in this node is less than s. Analog if the node 2n + 1 has the split point s
then all data in this node is greater than or equal to s.
\item y: only for leafs; the approximate value for the data in a leaf
\item A: elements of the data in this node
\item c_value: the approximate value for the data in a node
}
}
\description{
Greedy algorithm for either regression or classification data
}
\examples{
X <- runif(100,0,1)
e <- rnorm(100,0,0.2)
Y <- sin(2*pi*X) + e
data <- list(a = X, b = Y)
val <- greedy_cart(x = a, y = b, data = data, type = "reg")
val$values
val$tree

X1 <- runif(200,0,1)
X2 <- runif(200,0,1)
e <- rnorm(200,0,0.05)
k <- function(x,y) (x-0.5)*(y-0.5)
g <- function(x,y,e){
  Y <- c()
  for(i in seq_along(x)){
   if(k(X1[i],X2[i]) - e[i] <= 0){
     Y[i] <- 1
    } else{
      Y[i] <- 2
    }
  }
  Y
}
tbl <- tibble(x1 = X1, x2 = X2, y = g(X1,X2,e))
val <- greedy_cart(x = c(x1,x2), y = y, data = tbl, type = "class", depth = 3)
val$values
val$tree
}
